// <auto-generated />
using System;
using AutoOA.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoOA.Core.Migrations
{
    [DbContext(typeof(AutoOADbContext))]
    [Migration("20221111000058_Test1")]
    partial class Test1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoOA.Core.BodyType", b =>
                {
                    b.Property<int>("BodyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTypeId"), 1L, 1);

                    b.Property<string>("BodyTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodyTypeId");

                    b.ToTable("BodyTypes");

                    b.HasData(
                        new
                        {
                            BodyTypeId = 1,
                            BodyTypeName = "Седан",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 2,
                            BodyTypeName = "Універсал",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 3,
                            BodyTypeName = "Хетчбек",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 4,
                            BodyTypeName = "Купе",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 5,
                            BodyTypeName = "Кабріолет",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 6,
                            BodyTypeName = "Позашляховик / Кросовер",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 7,
                            BodyTypeName = "Мінівен",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 8,
                            BodyTypeName = "Ліфтбек",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 9,
                            BodyTypeName = "Мікровен",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 10,
                            BodyTypeName = "Пікап",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 11,
                            BodyTypeName = "Родстер",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 12,
                            BodyTypeName = "Лімузин",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        },
                        new
                        {
                            BodyTypeId = 13,
                            BodyTypeName = "Фастбек",
                            IconPath = "\\Images\\BodyTypeIcon.png"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.DriveType", b =>
                {
                    b.Property<int>("DriveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriveTypeId"), 1L, 1);

                    b.Property<string>("DriveTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriveTypeId");

                    b.ToTable("DriveTypes");

                    b.HasData(
                        new
                        {
                            DriveTypeId = 1,
                            DriveTypeName = "Повний"
                        },
                        new
                        {
                            DriveTypeId = 2,
                            DriveTypeName = "Передній"
                        },
                        new
                        {
                            DriveTypeId = 3,
                            DriveTypeName = "Задній"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelTypeId"), 1L, 1);

                    b.Property<string>("FuelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FuelTypeId");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            FuelTypeId = 1,
                            FuelName = "Дизель",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 2,
                            FuelName = "Бензин",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 3,
                            FuelName = "Газ",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 4,
                            FuelName = "Газ / Бензин",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 5,
                            FuelName = "Гібрид",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 6,
                            FuelName = "Електро",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 7,
                            FuelName = "Інше",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 8,
                            FuelName = "Газ метан",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        },
                        new
                        {
                            FuelTypeId = 9,
                            FuelName = "Газ пропан-бутан",
                            IconPath = "\\Images\\fuelTypeIcon.png"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.GearBox", b =>
                {
                    b.Property<int>("GearBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GearBoxId"), 1L, 1);

                    b.Property<string>("GearBoxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GearBoxId");

                    b.ToTable("GearBoxes");

                    b.HasData(
                        new
                        {
                            GearBoxId = 1,
                            GearBoxName = "Ручна / Механіка",
                            IconPath = "\\Images\\gearBoxIcon.png"
                        },
                        new
                        {
                            GearBoxId = 2,
                            GearBoxName = "Автомат",
                            IconPath = "\\Images\\gearBoxIcon.png"
                        },
                        new
                        {
                            GearBoxId = 3,
                            GearBoxName = "Типтронік",
                            IconPath = "\\Images\\gearBoxIcon.png"
                        },
                        new
                        {
                            GearBoxId = 4,
                            GearBoxName = "Робот",
                            IconPath = "\\Images\\gearBoxIcon.png"
                        },
                        new
                        {
                            GearBoxId = 5,
                            GearBoxName = "Варіатор",
                            IconPath = "\\Images\\gearBoxIcon.png"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"), 1L, 1);

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            RegionName = "Ukraine"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.SalesData", b =>
                {
                    b.Property<int>("SalesDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesDataId"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("SalesDataId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("SalesData");

                    b.HasData(
                        new
                        {
                            SalesDataId = 1,
                            CreatedOn = new DateTime(2022, 11, 11, 2, 0, 57, 824, DateTimeKind.Local).AddTicks(772),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 1
                        },
                        new
                        {
                            SalesDataId = 2,
                            CreatedOn = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("AutoOA.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "84f0d8a5-086d-483b-a131-957c85b12289",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6476cb8-6971-4481-bcdc-b7741998bcf6",
                            Email = "admin@autooa.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@AUTOOA.COM",
                            NormalizedUserName = "ADMIN@AUTOOA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBrc2NwulDrIkjV56Wv7SoIxhWyec/TNrHs+8CiE4Pi4+R1xuyoJsVPVC3WD7johmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e555b12-37dc-4ec2-96d1-431b2516d792",
                            TwoFactorEnabled = false,
                            UserName = "admin@autooa.com"
                        },
                        new
                        {
                            Id = "6cd70aa7-22d0-465b-816a-36a516cdaf1d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95c1dc41-53c9-4dbb-91d9-810cd9568293",
                            Email = "moder@autooa.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODER@AUTOOA.COM",
                            NormalizedUserName = "MODER@AUTOOA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECOysWF2yMrfEZ6s9PXLKrMpEVysbi6KDDjxNgeXYBm7lEMPk8SDsPGV01zGsBJEvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd57d62b-cc96-47c9-88b5-2b529d50a324",
                            TwoFactorEnabled = false,
                            UserName = "moder@autooa.com"
                        },
                        new
                        {
                            Id = "cfd937cc-fa7b-4d2b-a5dc-13c8c22d0ead",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c992e1ff-bc83-4efe-b09d-cbe97b94ddb9",
                            Email = "user@autooa.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@AUTOOA.COM",
                            NormalizedUserName = "USER@AUTOOA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFplH+yXedPiL9iR+9IvAg2iHZz+1voD8V3IfYVej9BsBI2wYkUIRCSYxKp/79/t8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6de0e2b0-191e-4397-b8e3-d47fc3f0ba37",
                            TwoFactorEnabled = false,
                            UserName = "user@autooa.com"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GearBoxId")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("MileageIconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("Price_EUR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price_UAH")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price_USD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ProductionYear")
                        .HasColumnType("smallint");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("StateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleIconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.HasKey("VehicleId");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("DriveTypeId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("GearBoxId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            BodyTypeId = 1,
                            Color = "Black",
                            Description = "Авто в дуже хорошому стані. Повністтю обслужене. Капіталовкладень не потребує.",
                            DriveTypeId = 1,
                            FuelTypeId = 1,
                            GearBoxId = 1,
                            Mileage = 90000,
                            MileageIconPath = "\\Images\\MileageIcon.png",
                            NumberOfDoors = 5,
                            NumberOfSeats = 4,
                            Price_EUR = 18968.65m,
                            Price_UAH = 698187.11m,
                            Price_USD = 19000m,
                            ProductionYear = (short)2006,
                            RegionId = 1,
                            StateNumber = "Не задано",
                            UserId = "cfd937cc-fa7b-4d2b-a5dc-13c8c22d0ead",
                            VehicleIconPath = "\\Images\\w220cidan.png",
                            VehicleModelId = 1,
                            isNew = true
                        },
                        new
                        {
                            VehicleId = 2,
                            BodyTypeId = 2,
                            Color = "Gray",
                            Description = "Продаю свій автомобіль у хорошому стані. Зроблено всі планові роботи, все працює добре. Є невеликі подряпини, пов'язані з експлуатацією.",
                            DriveTypeId = 3,
                            FuelTypeId = 2,
                            GearBoxId = 2,
                            Mileage = 320000,
                            MileageIconPath = "\\Images\\MileageIcon.png",
                            NumberOfDoors = 5,
                            NumberOfSeats = 4,
                            Price_EUR = 14976.07m,
                            Price_UAH = 551200.35m,
                            Price_USD = 15000m,
                            ProductionYear = (short)2000,
                            RegionId = 1,
                            StateNumber = "Не задано",
                            UserId = "cfd937cc-fa7b-4d2b-a5dc-13c8c22d0ead",
                            VehicleIconPath = "\\Images\\320Universal.png",
                            VehicleModelId = 2,
                            isNew = false
                        });
                });

            modelBuilder.Entity("AutoOA.Core.VehicleBrand", b =>
                {
                    b.Property<int>("VehicleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleBrandId"), 1L, 1);

                    b.Property<string>("VehicleBrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleBrandId");

                    b.ToTable("VehicleBrands");

                    b.HasData(
                        new
                        {
                            VehicleBrandId = 1,
                            VehicleBrandName = "Mercedes"
                        },
                        new
                        {
                            VehicleBrandId = 2,
                            VehicleBrandName = "BMW"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.VehicleModel", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleModelId"), 1L, 1);

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleModelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleModelId");

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            VehicleModelId = 1,
                            VehicleBrandId = 1,
                            VehicleModelName = "E 220"
                        },
                        new
                        {
                            VehicleModelId = 2,
                            VehicleBrandId = 2,
                            VehicleModelName = "320"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3ecd6716-4b3f-4923-8c04-b836569de487",
                            ConcurrencyStamp = "19584bc2-38a8-4acc-a8c2-e90208188fb9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4eebe85e-9be7-4845-a920-3722de767a15",
                            ConcurrencyStamp = "9930e85b-a3fa-4a05-926d-b201f023f4eb",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "42c884eb-f378-4248-8d52-8a8b5aa8b007",
                            ConcurrencyStamp = "0c7665ea-b3b7-42d9-8ec8-4c9b446809da",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "84f0d8a5-086d-483b-a131-957c85b12289",
                            RoleId = "3ecd6716-4b3f-4923-8c04-b836569de487"
                        },
                        new
                        {
                            UserId = "84f0d8a5-086d-483b-a131-957c85b12289",
                            RoleId = "4eebe85e-9be7-4845-a920-3722de767a15"
                        },
                        new
                        {
                            UserId = "84f0d8a5-086d-483b-a131-957c85b12289",
                            RoleId = "42c884eb-f378-4248-8d52-8a8b5aa8b007"
                        },
                        new
                        {
                            UserId = "6cd70aa7-22d0-465b-816a-36a516cdaf1d",
                            RoleId = "4eebe85e-9be7-4845-a920-3722de767a15"
                        },
                        new
                        {
                            UserId = "6cd70aa7-22d0-465b-816a-36a516cdaf1d",
                            RoleId = "42c884eb-f378-4248-8d52-8a8b5aa8b007"
                        },
                        new
                        {
                            UserId = "cfd937cc-fa7b-4d2b-a5dc-13c8c22d0ead",
                            RoleId = "42c884eb-f378-4248-8d52-8a8b5aa8b007"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoOA.Core.SalesData", b =>
                {
                    b.HasOne("AutoOA.Core.Vehicle", "Vehicle")
                        .WithOne("SalesData")
                        .HasForeignKey("AutoOA.Core.SalesData", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.Vehicle", b =>
                {
                    b.HasOne("AutoOA.Core.BodyType", "BodyType")
                        .WithMany("Vehicle")
                        .HasForeignKey("BodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoOA.Core.DriveType", "DriveType")
                        .WithMany("Vehicle")
                        .HasForeignKey("DriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoOA.Core.FuelType", "FuelType")
                        .WithMany("Vehicle")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoOA.Core.GearBox", "GearBox")
                        .WithMany("Vehicle")
                        .HasForeignKey("GearBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoOA.Core.Region", "Region")
                        .WithMany("Vehicles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoOA.Core.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId");

                    b.HasOne("AutoOA.Core.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("DriveType");

                    b.Navigation("FuelType");

                    b.Navigation("GearBox");

                    b.Navigation("Region");

                    b.Navigation("User");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("AutoOA.Core.VehicleModel", b =>
                {
                    b.HasOne("AutoOA.Core.VehicleBrand", "VehicleBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleBrand");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoOA.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoOA.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoOA.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoOA.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoOA.Core.BodyType", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.DriveType", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.FuelType", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.GearBox", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.Region", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AutoOA.Core.User", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("AutoOA.Core.Vehicle", b =>
                {
                    b.Navigation("SalesData");
                });

            modelBuilder.Entity("AutoOA.Core.VehicleBrand", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("AutoOA.Core.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
